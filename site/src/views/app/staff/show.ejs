<%- contentFor('body') %>
<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        <i class="fa fa-users"></i> Staff -
        <span v-if="staff.loading">Carregando...</span>
        <span v-if="!staff.loading && !staff.exists">Usuário não encontrado</span>
        <span v-if="!staff.loading && staff.exists">{{ staff.data.member_fullname }}</span>
    </h1>
    <ol class="breadcrumb">
        <li><a href="/app">Home</a></li>
        <li><a href="/app/staff"><i class="fa fa-users"></i> Staff</a></li>
        <li class="active">
            <i class="fa fa-users"></i> Staff -
            <span v-if="staff.loading">Carregando...</span>
            <span v-if="!staff.loading && !staff.exists">Usuário não encontrado</span>
            <span v-if="!staff.loading && staff.exists">{{ staff.data.member_fullname }}</span>
        </li>
    </ol>
</section>

<!-- Main content -->
<section class="content">

    <p>
        <a href="/app/staff" class="btn btn-default">
            <span class="fa fa-arrow-left"></span>
            Voltar
        </a>
    </p>

    <!-- Staff -->
    <div class="box">
        <div class="box-header">
            <h3 class="box-title">Staff</h3>
        </div>

        <div class="box-body" v-if="staff.loading && !staff.loaded">
            <div class="alert alert-info">
                Carregando...
            </div>
        </div>

        <div class="box-body" v-if="staff.loaded && !staff.exists">
            <div class="alert alert-warning">
                Staff não encontrado
            </div>
        </div>

        <div class="box-body" v-if="staff.loaded && staff.exists">
            <div class="media">
                <div class="media-left">
                    <img :src="staff.data.member_avatar" :alt="staff.data.member_fullname"
                        class="media-object img-rounded" style="max-width: 46px;">
                </div>
                <div class="media-body">
                    <h4 class="media-heading">
                        {{ staff.data.member_fullname }}
                    </h4>

                    <span class="label label-default"
                        v-if="staff.data.description != ''">{{ staff.data.description }}</span>
                </div>
            </div>
        </div>

        <div class="overlay" v-if="staff.loading">
            <i class="fa fa-refresh fa-spin"></i>
        </div>
    </div>
    <!-- /Staff -->

    <div class="row">
        <div class="col-xs-12 col-sm-6">
            <!-- Cargos -->
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Cargos</h3>
                </div>
                <!-- /.box-header -->

                <div class="box-body" v-if="roles.loading && !roles.loaded">
                    <div class="alert alert-info">
                        Carregando...
                    </div>
                </div>

                <div class="box-body" v-if="roles.loaded && !roles.list.length">
                    <div class="alert alert-warning">
                        Nenhum registro encontrado
                    </div>
                </div>

                <div class="box-body table-responsive no-padding" v-if="roles.loaded && roles.list.length">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Cargo</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="role in roles.list">
                                <td :style="`border-left: 8px solid ${role.color};`">
                                    {{ role.name }}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <!-- /.box-body -->

                <div class="overlay" v-if="roles.loading">
                    <i class="fa fa-refresh fa-spin"></i>
                </div>
            </div>
            <!-- /Cargos -->
        </div>

        <div class="col-xs-12 col-sm-6">
            <!-- Expediente -->
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Expediente</h3>
                </div>
                <!-- /.box-header -->

                <div class="box-body" v-if="expedients.loading && !expedients.loaded">
                    <div class="alert alert-info">
                        Carregando...
                    </div>
                </div>

                <div class="box-body" v-if="expedients.loaded && !expedients.list.length">
                    <div class="alert alert-warning">
                        Nenhum registro encontrado
                    </div>
                </div>

                <div class="box-body table-responsive no-padding" v-if="expedients.loaded && expedients.list.length">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Entrada</th>
                                <th>Saída</th>
                                <th>Online por</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="expedient in expedients.list">
                                <td>
                                    {{ expedient.entered_at }}
                                </td>
                                <td>
                                    {{ expedient.left_at }}
                                </td>
                                <td>
                                    {{ expedient.diff }}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <!-- /.box-body -->

                <div class="overlay" v-if="expedients.loading">
                    <i class="fa fa-refresh fa-spin"></i>
                </div>
            </div>
            <!-- /Expediente -->
        </div>
    </div>

    <div class="box box-primary">
        <div class="box-body no-padding">
            <!-- THE CALENDAR -->
            <div id="calendar"></div>
        </div>
        <!-- /.box-body -->
    </div>

</section>
<!-- /.content -->

<%- contentFor('scripts') %>
<script>
    mixins.push({
        data: {

            member_id: '<%- member_id %>',

            staff: {
                loading: true,
                loaded: false,

                error: false,
                messages: [],

                exists: false,
                data: {},
            },

            roles: {
                loading: true,
                loaded: false,

                error: false,
                messages: [],

                list: [],
            },

            expedients: {
                loading: true,
                loaded: false,

                error: false,
                messages: [],

                list: [],
            },

        },
        methods: {

            init: function () {
                App.getStaff();
            },

            getStaff: async () => {
                try {
                    function callback(data) {
                        if (typeof data.error !== 'undefined') App.staff.error = data.error;
                        if (typeof data.messages !== 'undefined') App.staff.messages = data.messages;
                        if (typeof data.content !== 'undefined') {
                            if (typeof data.content.staff !== 'undefined') {
                                App.staff.exists = true;

                                const staff = data.content.staff;
                                App.staff.data = staff;

                                App.staff.data.description = '';
                                if (staff.squad_name) App.staff.data.description = staff.group_name + ' - ' + staff.squad_name + ' - ' + staff.level_name;

                                App.getRoles();
                                App.getExpedients();
                            }
                        }

                        App.staff.loading = false;
                        App.staff.loaded = true;
                    }

                    App.staff.loading = true;
                    App.staff.exists = false;

                    const { data } = await axios.get(`/api/staff/${App.member_id}`);

                    callback(data);
                } catch ({ response }) {
                    callback(response.data);
                }
            },

            getRoles: async () => {
                try {
                    function callback(data) {
                        if (typeof data.error !== 'undefined') App.roles.error = data.error;
                        if (typeof data.messages !== 'undefined') App.roles.messages = data.messages;
                        if (typeof data.content !== 'undefined') {
                            if (typeof data.content.roles !== 'undefined') {
                                App.roles.list = data.content.roles;
                            }
                        }

                        App.roles.loading = false;
                        App.roles.loaded = true;
                    }

                    App.roles.loading = true;
                    App.roles.exists = false;

                    const { data } = await axios.get(`/api/staff/${App.member_id}/roles`);

                    callback(data);
                } catch ({ response }) {
                    callback(response.data);
                }
            },

            getExpedients: async () => {
                try {
                    function callback(data) {
                        if (typeof data.error !== 'undefined') App.expedients.error = data.error;
                        if (typeof data.messages !== 'undefined') App.expedients.messages = data.messages;
                        if (typeof data.content !== 'undefined') {
                            if (typeof data.content.expedients !== 'undefined') {
                                App.expedients.list = data.content.expedients;

                                var calendarEvents = [];

                                var colors = [
                                    '#f56954',
                                    '#f39c12',
                                    '#0073b7',
                                    '#00c0ef',
                                    '#00a65a',
                                    '#00a65a',
                                    '#3c8dbc',
                                ];

                                for (var i in App.expedients.list) {
                                    var item = App.expedients.list[i];

                                    var event = {
                                        // title: moment(item.entered_at).format('HH:mm:ss'),
                                        // start: new Date(item.entered_at),
                                        // end: new Date(item.left_at),
                                        backgroundColor: colors[i % colors.length], //yellow
                                        borderColor: colors[i % colors.length] //yellow
                                    };

                                    const title = [];

                                    var entered_at = item.entered_at.split(' ');
                                    entered_at[0] = entered_at[0].split('/').reverse().join('-')
                                    entered_at = entered_at.join(' ');
                                    event.start = new Date(entered_at);

                                    if (item.left_at) {
                                        var left_at = item.left_at.split(' ');
                                        left_at[0] = left_at[0].split('/').reverse().join('-')
                                        left_at = left_at.join(' ');
                                        event.end = new Date(left_at);
                                    } else {
                                        event.end = new Date();
                                    }

                                    // title.push('');
                                    // title.push(moment(event.start).format('HH:mm'));
                                    // title.push(moment(event.end).format('HH:mm'));
                                    // event.title = title.join(' - ');

                                    calendarEvents.push(event);
                                }

                                App.initCalendar(calendarEvents);
                            }
                        }

                        App.expedients.loading = false;
                        App.expedients.loaded = true;
                    }

                    App.expedients.loading = true;
                    App.expedients.exists = false;

                    const { data } = await axios.get(`/api/staff/${App.member_id}/expedients`);

                    callback(data);
                } catch ({ response }) {
                    callback(response.data);
                }
            },

            initCalendar: (calendarEvents) => {
                var date = new Date();

                var d = date.getDate(),
                    m = date.getMonth(),
                    y = date.getFullYear();

                $('#calendar').fullCalendar({
                    header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'month,agendaWeek,agendaDay'
                    },
                    buttonText: {
                        today: 'today',
                        month: 'month',
                        week: 'week',
                        day: 'day'
                    },
                    locale: 'pt-br',
                    // initialView: 'timeGridWeek',
                    initialView: 'dayGridMonth',
                    //Random default events
                    events: calendarEvents,
                    editable: false,
                    // droppable: true, // this allows things to be dropped onto the calendar !!!
                    // drop: function (date, allDay) { // this function is called when something is dropped

                    //     // retrieve the dropped element's stored Event Object
                    //     var originalEventObject = $(this).data('eventObject')

                    //     // we need to copy it, so that multiple events don't have a reference to the same object
                    //     var copiedEventObject = $.extend({}, originalEventObject)

                    //     // assign it the date that was reported
                    //     copiedEventObject.start = date
                    //     copiedEventObject.allDay = allDay
                    //     copiedEventObject.backgroundColor = $(this).css('background-color')
                    //     copiedEventObject.borderColor = $(this).css('border-color')

                    //     // render the event on the calendar
                    //     // the last `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                    //     $('#calendar').fullCalendar('renderEvent', copiedEventObject, true)

                    //     // is the "remove after drop" checkbox checked?
                    //     if ($('#drop-remove').is(':checked')) {
                    //         // if so, remove the element from the "Draggable Events" list
                    //         $(this).remove()
                    //     }

                    // }
                });
            },

        },
    });
</script>